import os
import json
import logging
import re
import asyncio
from collections import defaultdict
from urllib.parse import urlsplit, urlunsplit, quote
from dotenv import load_dotenv
from aiogram import Bot, types
from openai import OpenAI
from db import Session, Flats as DBFlats

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ===
load_dotenv()
client = OpenAI(api_key=os.getenv("API_KEY"))
logger = logging.getLogger(__name__)

# === –ö—ç—à–∏ ===
user_conversations = defaultdict(list)
last_filters_cache = {}
shown_flats_cache = defaultdict(set)
SUPPORTED_LANGS = {"ru", "uz", "en", "kk"}


# === –†–ï–ó–ï–†–í–ù–´–ô –ü–ê–†–°–ï–† (fallback) ===
def fallback_parse_filters(text: str) -> dict:
    filters = {}

    low = text.lower()

    # –Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã: "‚Ññ123", "–Ω–æ–º–µ—Ä 123"
    if match := re.search(r'(?:‚Ññ|–Ω–æ–º–µ—Ä)\s*#?\s*(\d+)', text, re.IGNORECASE):
        try:
            filters["number"] = int(match.group(1))
        except Exception:
            pass

    # 1‚Äì5 –∫–æ–º–Ω–∞—Ç / "2 –∫–æ–º–Ω–∞—Ç" / uz: "2 honali", "2 xonali", "2 xona"
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Å–ª–æ–≤ –¥–ª—è –∫–æ–º–Ω–∞—Ç
    if match := re.search(r'(\d+)\s*[- ]?\s*(?:–∫–æ–º–Ω–∞—Ç|–∫–æ–º–Ω|honali|xonali|xona|—Ö–æ–Ω–∞–ª–∏)', text, re.IGNORECASE):
        try:
            filters["rooms"] = int(match.group(1))
        except Exception:
            pass

    # —ç—Ç–∞–∂: –¥–∏–∞–ø–∞–∑–æ–Ω "—ç—Ç–∞–∂ 1-5" –∏–ª–∏ "—ç—Ç–∞–∂ –æ—Ç 1 –¥–æ 5" –∏–ª–∏ "4-5 qavat"
    if match := re.search(r'(?:—ç—Ç–∞–∂|qavat|“õ–∞–≤–∞—Ç)(?:–∞|–µ–π)?\s*(?:–æ—Ç\s*)?(\d+)\s*(?:–¥–æ|-)\s*(\d+)', low, re.IGNORECASE):
        try:
            start = int(match.group(1))
            end = int(match.group(2))
            if start <= end:
                filters["stage_min"] = start
                filters["stage_max"] = end
        except Exception:
            pass
    else:
        # –æ–¥–∏–Ω–æ—á–Ω—ã–π —ç—Ç–∞–∂ "3 —ç—Ç–∞–∂", "–Ω–∞ 3 —ç—Ç–∞–∂–µ", "5 qavat", "5-qavat"
        if match := re.search(r'(\d+)\s*(?:—ç—Ç–∞–∂|—ç—Ç–∞–∂–µ|qavat|“õ–∞–≤–∞—Ç)', text, re.IGNORECASE):
            try:
                filters["stage"] = int(match.group(1))
            except Exception:
                pass

    # —Ü–µ–Ω–∞ –¥–æ / –º–∞–∫—Å–∏–º—É–º (–ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Ç—ã—Å)
    if match := re.search(r'(\d+[.,]?\d*)\s*(—Ç—ã—Å|—Ç—ã—Å—è—á)?\s*(?:\$|–¥–æ–ª–ª–∞—Ä|—Å–æ–º|—Å—É–º|usd)?', text, re.IGNORECASE):
        try:
            price = float(match.group(1).replace(',', '.'))
            if match.group(2):
                # –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ —Ç—ã—Å(—è—á), —É–º–Ω–æ–∂–∞–µ–º
                price *= 1000
            filters["price_max"] = int(price)
        except Exception:
            pass

    # —Ç–∏–ø: –º–∞–≥–∞–∑–∏–Ω / —Å—Ç—É–¥–∏—è / –∫–≤–∞—Ä—Ç–∏—Ä–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ö–≤–∞—Ä—Ç–∏—Ä–∞)
    if '–º–∞–≥–∞–∑–∏–Ω' in low:
        filters["type"] = "–ú–∞–≥–∞–∑–∏–Ω"
    elif '—Å—Ç—É–¥' in low or re.search(r'\b1\s*–∫–æ–º–Ω', low):
        filters["type"] = "–°—Ç—É–¥–∏—è"
    elif 'uy' in low or '–¥–æ–º' in low or 'uy' in text.lower():
        # –µ—Å–ª–∏ —É–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è 'uy' (—É–∑–±–µ–∫—Å–∫–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –¥–æ–º–∞) ‚Äî –≤—Å—ë —Ä–∞–≤–Ω–æ —Å—á–∏—Ç–∞–µ–º –∫–≤–∞—Ä—Ç–∏—Ä–æ–π –≤ —Ç–µ—Ä–º–∏–Ω–∞—Ö –ë–î
        filters["type"] = "–ö–≤–∞—Ä—Ç–∏—Ä–∞"
    else:
        # –≤–µ—Ä–Ω—É—Ç—å –ø–æ–≤–µ–¥–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: –µ—Å–ª–∏ —Ç–∏–ø –Ω–µ —É–∫–∞–∑–∞–Ω —è–≤–Ω–æ ‚Äî –∏—Å–∫–∞—Ç—å "–ö–≤–∞—Ä—Ç–∏—Ä–∞"
        filters.setdefault("type", "–ö–≤–∞—Ä—Ç–∏—Ä–∞")

    return filters


# === –£–¢–ò–õ–ò–¢–ê –î–õ–Ø URL ===
def normalize_url(url: str) -> str:
    try:
        parts = urlsplit(url)
        path = quote(parts.path, safe="/%") if parts.path else ""
        query = quote(parts.query, safe="=&?") if parts.query else ""
        return urlunsplit((parts.scheme, parts.netloc, path, query, parts.fragment))
    except Exception:
        return url


# === "–ü–ï–ß–ê–¢–ê–ï–¢..." ===
async def show_typing(bot: Bot, chat_id: int, duration: int = 5):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä 'typing' –≤ —á–∞—Ç–µ.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç types.ChatActions.TYPING –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å aiogram.
    –ó–∞—â–∏—â–µ–Ω–æ –æ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–π, —á—Ç–æ–±—ã –Ω–µ –ª–æ–º–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫.
    """
    try:
        end_time = asyncio.get_event_loop().time() + duration
        while asyncio.get_event_loop().time() < end_time:
            await bot.send_chat_action(chat_id, types.ChatActions.TYPING)
            await asyncio.sleep(4)
    except Exception as e:
        logger.debug(f"show_typing error: {e}")
        pass


# === –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –Ø–ó–´–ö–ê ===
async def detect_language(text: str) -> str:
    try:
        resp = client.chat.completions.create(
            model="gpt-5-chat-latest",
            messages=[
                {"role": "system", "content": "Respond ONLY with one code: ru, en, uz, kk."},
                {"role": "user", "content": text},
            ],
            max_completion_tokens=5,
        )
        lang = resp.choices[0].message.content.strip().lower()
        return lang if lang in SUPPORTED_LANGS else "ru"
    except Exception:
        return "ru"


# === GPT-–ü–ê–†–°–ï–† –§–ò–õ–¨–¢–†–û–í ===
async def extract_filters_with_gpt(text: str) -> dict:
    """
    GPT –ø–∞—Ä—Å–∏—Ç —Ñ–∏–ª—å—Ç—Ä—ã –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.
    –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –≤–æ–∑–≤—Ä–∞—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ JSON.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è:
      - number (int) ‚Äî –Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã
      - stage_min, stage_max (int) ‚Äî –¥–∏–∞–ø–∞–∑–æ–Ω —ç—Ç–∞–∂–µ–π
    """
    try:
        messages = [
            {
                "role": "system",
                "content": (
                    "–¢—ã –ø–∞—Ä—Å–µ—Ä —Ñ–∏–ª—å—Ç—Ä–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏. "
                    "–í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ JSON –±–µ–∑ —Ç–µ–∫—Å—Ç–∞ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤. "
                    "–ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç ‚Äî –≤–µ—Ä–Ω–∏ '{}'. "
                    "–ü–æ–ª—è: number (int) –µ—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç —Å–∫–∞–∑–∞–ª, type (–ö–≤–∞—Ä—Ç–∏—Ä–∞|–°—Ç—É–¥–∏—è|–ú–∞–≥–∞–∑–∏–Ω), rooms (int), "
                    "stage (int), stage_min (int), stage_max (int), price_max (int), price_order (min|max). "
                    "–¢–∞–∫–∂–µ –ø–æ–Ω–∏–º–∞–π —É–∑–±–µ–∫—Å–∫–∏–µ —Å–ª–æ–≤–∞ 'qavat', 'xonali', 'honali' –∫–∞–∫ —ç—Ç–∞–∂–∏ –∏ –∫–æ–º–Ω–∞—Ç—ã."
                ),
            },
            {"role": "user", "content": text},
        ]

        resp = client.chat.completions.create(
            model="gpt-5-chat-latest",
            messages=messages,
            max_completion_tokens=250,
        )

        raw = resp.choices[0].message.content.strip()
        print("\n[GPT RAW FILTERS]:", raw, "\n")

        # —É–±–∏—Ä–∞–µ–º markdown-–º—É—Å–æ—Ä ```json ``` –∏ —Ç.–ø.
        cleaned = re.sub(r"```(?:json)?|```", "", raw).strip()

        data = json.loads(cleaned) if cleaned else {}
        if not isinstance(data, dict):
            raise ValueError("GPT –æ—Ç–≤–µ—Ç–∏–ª –Ω–µ JSON")

        # –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º —á–∏—Å–ª–æ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ –≤ int (–µ—Å–ª–∏ –±—É–¥—É—Ç)
        for k in ["number", "rooms", "stage", "stage_min", "stage_max", "price_max"]:
            if k in data and data[k] is not None:
                try:
                    data[k] = int(data[k])
                except Exception:
                    data.pop(k, None)

        # –≤ —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω stage (–µ–¥–∏–Ω–∏—á–Ω—ã–π) –∏ —Ç–∞–∫–∂–µ —É–∫–∞–∑–∞–Ω –¥–∏–∞–ø–∞–∑–æ–Ω ‚Äî –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–∏–∞–ø–∞–∑–æ–Ω—É
        if "stage_min" in data and "stage_max" in data and "stage" in data:
            data.pop("stage", None)

        logger.info(f"‚úÖ GPT parsed filters: {data}")
        return data

    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ GPT: {e}")
        filters = fallback_parse_filters(text)
        logger.info(f"üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback: {filters}")
        return filters


# === –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø ===
async def ask_openai_sync(user_id: int, text: str, bot: Bot = None, chat_id: int = None):
    print(f"\n=== USER MESSAGE ===\n{text}\n====================\n")
    text = text.strip()
    if not text:
        return {"text": "‚ùó –ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å"}

    if bot and chat_id:
        asyncio.create_task(show_typing(bot, chat_id, duration=5))

    # —è–∑—ã–∫
    lang = await detect_language(text)
    user_conversations[user_id].append(text)

    # —Ñ–∏–ª—å—Ç—Ä—ã
    filters = await extract_filters_with_gpt(text)
    if not filters:
        filters = fallback_parse_filters(text)

    if not filters:
        msg = {
            "ru": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –ø–æ–∂–µ–ª–∞–Ω–∏–µ üí¨",
            "uz": "Iltimos, kamida bitta talabni kiriting üí¨",
            "en": "Please specify at least one preference üí¨",
            "kk": "–ö–µ–º –¥–µ–≥–µ–Ω–¥–µ –±—ñ—Ä “õ–∞–ª–∞—É—ã“£—ã–∑–¥—ã –∫”©—Ä—Å–µ—Ç—ñ“£—ñ–∑ üí¨",
        }[lang]
        return {"text": msg}

    last_filters_cache[user_id] = filters
    shown_flats_cache[user_id].clear()

    if bot and chat_id:
        asyncio.create_task(show_typing(bot, chat_id, duration=5))

    # === –ü–æ–∏—Å–∫ –≤ –ë–î ===
    session = Session()
    query = session.query(DBFlats)

    # –ü–æ –Ω–æ–º–µ—Ä—É –∫–≤–∞—Ä—Ç–∏—Ä—ã ‚Äî –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω, –∏—â–µ–º —Å—Ç—Ä–æ–≥–æ –ø–æ –Ω–æ–º–µ—Ä—É
    if filters.get("number") is not None:
        try:
            query = query.filter(DBFlats.number == filters["number"])
        except Exception:
            try:
                query = query.filter(DBFlats.number == str(filters["number"]))
            except Exception:
                pass

    else:
        # —Ç–∏–ø
        if filters.get("type"):
            query = query.filter(DBFlats.type == filters["type"])
        if filters.get("rooms"):
            query = query.filter(DBFlats.rooms == filters["rooms"])

        # —ç—Ç–∞–∂: –¥–∏–∞–ø–∞–∑–æ–Ω –∏–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π
        if filters.get("stage_min") is not None and filters.get("stage_max") is not None:
            try:
                query = query.filter(DBFlats.stage >= filters["stage_min"])
                query = query.filter(DBFlats.stage <= filters["stage_max"])
            except Exception:
                pass
        elif filters.get("stage") is not None:
            query = query.filter(DBFlats.stage == filters["stage"])

        # —Ü–µ–Ω–∞
        if filters.get("price_max"):
            query = query.filter(DBFlats.price <= filters["price_max"])
        if filters.get("price_order") == "min":
            query = query.order_by(DBFlats.price.asc())
        elif filters.get("price_order") == "max":
            query = query.order_by(DBFlats.price.desc())

    flats = query.filter(DBFlats.status == "–°–≤–æ–±–æ–¥–Ω–æ").all()
    session.close()

    if not flats:
        msg = {
            "ru": "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –æ–±—ä–µ–∫—Ç—ã —Å —Ç–∞–∫–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. üèô",
            "uz": "Afsuski, bunday parametrli obyektlar topilmadi. üèô",
            "en": "Unfortunately, no properties match these parameters. üèô",
            "kk": "”®–∫—ñ–Ω—ñ—à–∫–µ –æ—Ä–∞–π, –º“±–Ω–¥–∞–π –ø–∞—Ä–∞–º–µ—Ç—Ä–ª–µ—Ä–º–µ–Ω –Ω—ã—Å–∞–Ω–¥–∞—Ä —Ç–∞–±—ã–ª–º–∞–¥—ã. üèô",
        }[lang]
        return {"text": msg}

    # === –§–∏–ª—å—Ç—Ä—É–µ–º —É–∂–µ –ø–æ–∫–∞–∑–∞–Ω–Ω—ã–µ ===
    seen = shown_flats_cache[user_id]
    new_flats = [f for f in flats if f.number not in seen][:4]
    if not new_flats:
        seen.clear()
        new_flats = flats[:4]
    for f in new_flats:
        seen.add(f.number)

    # === –§–æ—Ä–º–∏—Ä—É–µ–º –≤—ã–≤–æ–¥ ===
    results = []
    for f in new_flats:
        text_base = (
            f"üè† {f.type} ‚Ññ{f.number}\n"
            f"‚Ä¢ –ö–æ–º–Ω–∞—Ç: {f.rooms}\n"
            f"‚Ä¢ –≠—Ç–∞–∂: {f.stage}\n"
            f"‚Ä¢ –ü–ª–æ—â–∞–¥—å: {f.sq_m} –º¬≤\n"
            f"‚Ä¢ –¶–µ–Ω–∞: {f.price} $\n"
            f"‚Ä¢ –ü–æ–¥—ä–µ–∑–¥: {f.lobby}\n\n"
            f"{f.description}\n\n"
            "–° –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π. üèô"
        )

        # –ø–µ—Ä–µ–≤–æ–¥, –µ—Å–ª–∏ —è–∑—ã–∫ –Ω–µ —Ä—É—Å—Å–∫–∏–π
        if lang != "ru":
            try:
                translation = client.chat.completions.create(
                    model="gpt-5-chat-latest",
                    messages=[
                        {
                            "role": "system",
                            "content": f"Translate to {lang}, but keep numbers and building names unchanged.",
                        },
                        {"role": "user", "content": text_base},
                    ],
                )
                text_base = translation.choices[0].message.content.strip()
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {e}")

        photo_val = normalize_url(f.plan.strip()) if getattr(f, "plan", None) else None
        results.append({"text": text_base, "photo": photo_val})

    return {"flats": results}


# === –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ ===
def clear_user(user_id: int):
    user_conversations[user_id].clear()
    last_filters_cache.pop(user_id, None)
    shown_flats_cache.pop(user_id, None)
