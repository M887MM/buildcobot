import asyncio
import os
import re
import logging
from collections import Counter
import csv
from aiogram.enums import ParseMode
from datetime import datetime
from aiogram.filters import Command
from aiogram import Bot, Dispatcher, types, exceptions
from aiogram.filters import CommandStart, StateFilter
from contextlib import contextmanager
from aiogram.types import (
    InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, Message, InputMediaPhoto
)
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.storage.memory import MemoryStorage
from dotenv import load_dotenv
from collections import defaultdict

from db import Session, Flats as DBFlats , Credit, Flats 
import openai_func

# ====== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ======
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
GROUP_ID = os.getenv("GROUP_ID")
try:
    GROUP_ID = int(GROUP_ID) if GROUP_ID else None
except Exception:
    GROUP_ID = None

if not BOT_TOKEN:
    logging.error("BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏. –ü—Ä–µ—Ä–≤–∞–Ω –∑–∞–ø—É—Å–∫.")
    raise SystemExit("BOT_TOKEN is required")

logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# ====== –ó–∞–≥—Ä—É–∑–∫–∞ –∫–≤–∞—Ä—Ç–∏—Ä –∏–∑ –ë–î ======
import logging
from contextlib import contextmanager
from db import Session, Flats as DBFlats

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–≤–∞—Ä—Ç–∏—Ä
Flats = {}

credit_works = False

@contextmanager
def get_session():
    """
    –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å —Å–µ—Å—Å–∏–µ–π SQLAlchemy.
    –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Å—Å–∏–∏ –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.
    """
    session = Session()
    try:
        yield session
    finally:
        session.close()

async def load_flats():
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–≤–∞—Ä—Ç–∏—Ä—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å Flats.
    –ï—Å–ª–∏ –±–∞–∑–∞ –ø—É—Å—Ç–∞ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–∞–≥–ª—É—à–∫–∞.
    """
    global Flats
    try:
        with get_session() as session:
            db_flats = session.query(DBFlats).filter(DBFlats.status == "–°–≤–æ–±–æ–¥–Ω–æ").all()
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–≤–∞—Ä—Ç–∏—Ä –∏–∑ –ë–î: %s", e)
        db_flats = []

    # –ó–∞–≥–ª—É—à–∫–∞, –µ—Å–ª–∏ –±–∞–∑–∞ –ø—É—Å—Ç–∞
    if not db_flats:
        class _Stub:
            number = "N/A"
            rooms = 1
            sq_m = 30
            price = 10000
            stage = 1
            plan = "https://via.placeholder.com/600x400.png?text=No+Flats+in+DB"
        db_flats = [_Stub()]

    Flats = {
        i + 1: {
            "type": flat.type,
            "rooms": flat.rooms,
            "area": getattr(flat, "sq_m", None),
            "price": getattr(flat, "price", 0),
            "stage": getattr(flat, "stage", None),
            "photo": getattr(flat, "plan", None) or "https://via.placeholder.com/600x400.png?text=No+Image",
            "raw": flat,
            "cached_file_id": None
        }
        for i, flat in enumerate(sorted(db_flats, key=lambda f: f.number))
    }
    logging.info("–ó–∞–≥—Ä—É–∂–µ–Ω–æ –∫–≤–∞—Ä—Ç–∏—Ä: %d", len(Flats))


# ====== FSM ======
class CreditState(StatesGroup):
    waiting_downpayment = State()
    waiting_term = State()
    asking_question = State()
    sending_phone = State()

# ====== –•—Ä–∞–Ω–∏–ª–∏—â–∞ –≤ –ø–∞–º—è—Ç–∏ ======
user_selection = {}         # per user: flat, phone, username, name, display_chat_id, display_msg_id, ...
manager_message_ids = {}

# ====== –ö–Ω–æ–ø–∫–∏ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã ======
def main_keyboard(index: int, has_contact: bool) -> InlineKeyboardMarkup:
    nav_row = [
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"flat_{index-1}"),
        InlineKeyboardButton(text="‚û°Ô∏è –í–ø–µ—Ä—ë–¥", callback_data=f"flat_{index+1}")
    ]
    choose_row = [
        InlineKeyboardButton(text="üîç –ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data=f"choose_{index}")
    ]
    extra_row = [
        InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –∫–≤–∞—Ä—Ç–∏—Ä", callback_data="show_list")
    ]
    return InlineKeyboardMarkup(inline_keyboard=[nav_row, choose_row, extra_row])

def choose_keyboard(index: int, has_contact: bool = False) -> InlineKeyboardMarkup:
    row = [
        InlineKeyboardButton(text="üí≥ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –≤ –∫—Ä–µ–¥–∏—Ç", callback_data=f"calc_{index}"),
    ]
    back = [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="back_to_list")]

    keyboard = [row, back]

    if not has_contact:
        contact_row = [
            InlineKeyboardButton(text="üì≤ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç", callback_data="request_phone")
        ]
        keyboard.insert(1, contact_row)

    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def result_keyboard(flat_index: int = 1) -> InlineKeyboardMarkup:
    row = [
        InlineKeyboardButton(text="üîÑ –ù–æ–≤—ã–π —Ä–∞—Å—á—ë—Ç", callback_data="new_calc"),
    ]
    return InlineKeyboardMarkup(inline_keyboard=[row])

def back_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_flats")]])

# ====== –£—Ç–∏–ª–∏—Ç—ã ======
def flat_caption(index: int) -> str:
    f = Flats.get(index)
    if not f:
        return "üè† –ö–≤–∞—Ä—Ç–∏—Ä–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
    flat_type = f.get("type")
    price = f.get("price") or 0
    price_str = f"{price:,}".replace(",", " ")
    raw = f.get("raw")
    number = getattr(raw, "number", "?") if raw else "?"
    return (f"üè† {flat_type} {index} (‚Ññ{number})\n"
            f"‚Ä¢ –ö–æ–º–Ω–∞—Ç: {f.get('rooms', '‚Äî')}\n"
            f"‚Ä¢ –ü–ª–æ—â–∞–¥—å: {f.get('area', '‚Äî')} –º¬≤\n"
            f"‚Ä¢ –≠—Ç–∞–∂: {f.get('stage', '‚Äî')}\n"
            f"‚Ä¢ –¶–µ–Ω–∞: {price_str} $")


def calc_credit(price: int, percent: int, months: int):
    rate = 0.25 / 12
    initial = price * percent / 100
    loan = price - initial
    payment = 0 if months == 0 else loan * (rate * (1 + rate) ** months) / ((1 + rate) ** months - 1)
    total = payment * months
    overpay = total - loan
    return int(initial), int(loan), int(round(payment)), int(round(total)), int(round(overpay))

def build_manager_message(user_id: int) -> str:
    sel = user_selection.get(user_id, {})
    name = sel.get("name") or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    phone = sel.get("phone") or "–ù–µ —É–∫–∞–∑–∞–Ω"
    flat_idx = sel.get("flat")

    # –ò–Ω—Ñ–æ –æ –∫–≤–∞—Ä—Ç–∏—Ä–µ
    if flat_idx and Flats.get(flat_idx):
        raw = Flats[flat_idx]["raw"]
        number = getattr(raw, "number", "?")
        rooms = getattr(raw, "rooms", "?")
        sq_m = getattr(raw, "sq_m", "?")
        price = getattr(raw, "price", "?")
        flat_line = f"üè† –ö–≤–∞—Ä—Ç–∏—Ä–∞ ‚Ññ{number}\n–ö–æ–º–Ω–∞—Ç: {rooms}, –ü–ª–æ—â–∞–¥—å: {sq_m} –º¬≤, –¶–µ–Ω–∞: {price}$"
    else:
        flat_line = "üè† –ö–≤–∞—Ä—Ç–∏—Ä–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω–∞"

    # –î–∏–∞–ª–æ–≥ –∏–∑ openai_func.user_conversations
    try:
        conv = openai_func.user_conversations.get(user_id, [])
        if conv:
            dialog_lines = []
            for msg in conv:
                role = msg.get("role", "user")
                content = msg.get("content", "").strip()
                if not content:
                    continue
                if role == "user":
                    dialog_lines.append(f"üë§ –ö–ª–∏–µ–Ω—Ç: {content}")
                elif role == "assistant":
                    dialog_lines.append(f"ü§ñ –ë–æ—Ç: {content}")
                else:
                    dialog_lines.append(f"{role}: {content}")
            dialog = "\n\n".join(dialog_lines)
        else:
            dialog = "‚Äî"
    except Exception:
        dialog = "‚Äî"

    text = (
        f"üë§ –ò–º—è: {name}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
        f"{flat_line}\n\n"
        f"üí¨ –î–∏–∞–ª–æ–≥ —Å GPT:\n"
        f"<pre>{dialog}</pre>"
    )

    text = text.replace("Shum", "")
    return text


# ====== –ú–µ–Ω–µ–¥–∂–µ—Ä—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ======
async def send_or_update_manager_message(user_id: int):
    if not GROUP_ID:
        return
    text = build_manager_message(user_id)
    mid = manager_message_ids.get(user_id)
    if mid:
        try:
            await bot.edit_message_text(chat_id=GROUP_ID, message_id=mid, text=text, parse_mode=ParseMode.HTML)
            return
        except Exception:
            pass
    try:
        sent = await bot.send_message(GROUP_ID, text, parse_mode=ParseMode.HTML)
        manager_message_ids[user_id] = sent.message_id
    except Exception:
        logging.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")


# ====== CSV ======
def persist_contact_to_csv(user_id: int, filename: str = "contacts.csv"):
    sel = user_selection.get(user_id, {})
    if not sel.get("phone"):
        return
    row = {
        "timestamp": datetime.utcnow().isoformat(),
        "user_id": user_id,
        "username": sel.get("username") or "",
        "name": sel.get("name") or "",
        "phone": sel.get("phone") or "",
        "flat": sel.get("flat") or "",
        "downpayment": sel.get("downpayment") or "",
        "months": sel.get("months") or "",
        "payment": sel.get("payment") or ""
    }
    file_exists = os.path.exists(filename)
    try:
        with open(filename, "a", newline="", encoding="utf-8") as f:
            writer = csv.DictWriter(f, fieldnames=list(row.keys()))
            if not file_exists:
                writer.writeheader()
            writer.writerow(row)
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ –≤ CSV: %s", e)

# ====== –û—Ç–ª–æ–∂–µ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ ======
async def delayed_send_contact_to_managers(user_id: int, delay_seconds: int = 1 * 60):
    try:
        logging.info(f"[DELAY TASK] –ó–∞–¥–∞—á–∞ –∑–∞–ø—É—â–µ–Ω–∞ –¥–ª—è user_id={user_id}, –∂–¥—ë–º {delay_seconds} —Å–µ–∫...")
        await asyncio.sleep(delay_seconds)
        if not GROUP_ID:
            logging.warning("[DELAY TASK] GROUP_ID –Ω–µ –∑–∞–¥–∞–Ω, –ø—Ä–æ–ø—É—Å–∫.")
            return
        sel = user_selection.get(user_id, {})
        phone = sel.get("phone")
        if not phone:
            logging.warning(f"[DELAY TASK] –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫.")
            return

        manager_text = build_manager_message(user_id)
        full_text = "‚è∞ –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (—á–µ—Ä–µ–∑ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è):\n" + manager_text

        try:
            await bot.send_message(GROUP_ID, full_text, parse_mode=ParseMode.HTML)
            logging.info(f"[DELAY TASK] –û—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É {GROUP_ID} –¥–ª—è user_id={user_id}")
        except Exception:
            logging.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º.")

        try:
            await send_or_update_manager_message(user_id)
        except Exception:
            pass
    except asyncio.CancelledError:
        return
    except Exception:
        logging.exception("–û—à–∏–±–∫–∞ –≤ delayed_send_contact_to_managers")


# ====== –ó–∞–ø—Ä–æ—Å –∫–æ–Ω—Ç–∞–∫—Ç–∞ ======
async def request_contact_prompt(message_or_obj, user_id):
    sel = user_selection.setdefault(user_id, {})
    if sel.get("phone_prompted") or sel.get("phone"):
        return
    sel["phone_prompted"] = True

    kb = types.ReplyKeyboardMarkup(
        keyboard=[[types.KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç", request_contact=True)]],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    try:
        await message_or_obj.answer(
            "üì≤ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç'):",
            reply_markup=kb
        )
    except Exception:
        try:
            chat_id = getattr(message_or_obj, "chat", None)
            if chat_id:
                chat_id = message_or_obj.chat.id
                await bot.send_message(
                    chat_id,
                    "üì≤ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç'):",
                    reply_markup=kb
                )
        except Exception:
            logging.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∫–æ–Ω—Ç–∞–∫—Ç–∞.")


# ====== Helpers –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–æ—Ç–æ –∏ —Ö—Ä–∞–Ω–µ–Ω–∏—è display msg ======
def is_url(s: str) -> bool:
    return isinstance(s, str) and s.startswith(("http://", "https://"))

def prepare_photo_for_send(photo_value):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
      - ('url', url)
      - ('file', InputFile, path)
      - ('file_id', file_id)
      - None
    """
    if not photo_value:
        return None
    # already a file_id saved as string?
    if isinstance(photo_value, str):
        if is_url(photo_value):
            return ('url', photo_value)
        # –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å: –¥–µ–ª–∞–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å
        p = os.path.expanduser(photo_value)
        p = os.path.abspath(p)
        if os.path.exists(p) and os.path.isfile(p):
            try:
                return ('file', types.InputFile(p), p)
            except Exception:
                logging.exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å InputFile –¥–ª—è %s", p)
                return None
        # –º–æ–∂–µ—Ç —ç—Ç–æ —É–∂–µ file_id (–Ω–µ –æ—á–µ–Ω—å –≤–µ—Ä–æ—è—Ç–Ω–æ, –Ω–æ –ø–æ–¥–¥–µ—Ä–∂–∏–º)
        if photo_value.isdigit() or '/' not in photo_value and len(photo_value) > 30:
            # heuristics: long token without slash could be file_id
            return ('file_id', photo_value)
        return None
    # If it's already aiogram InputFile
    if isinstance(photo_value, types.InputFile):
        return ('file', photo_value, None)
    return None

async def safe_send_and_store(chat_obj, user_id: int, photo_value, caption=None, reply_markup=None, flat_index: int = None):
    chat_id = getattr(chat_obj, "chat", None)
    if chat_id:
        chat_id = chat_obj.chat.id
    else:
        chat_id = user_selection.get(user_id, {}).get("display_chat_id")
    if not chat_id:
        logging.warning("safe_send_and_store: –Ω–µ—Ç chat_id, –ø—Ä–æ–ø—É—Å–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏")
        return None

    prepared = prepare_photo_for_send(photo_value)
    try:
        if prepared is None:
            logging.info("–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. (–ø–µ—á–∞—Ç–∞–µ—Ç...)")
            # –ø–æ–∫–∞–∑–∞—Ç—å "–ø–µ—á–∞—Ç–∞–µ—Ç..."
            try:
                await bot.send_chat_action(chat_id=chat_id, action="typing")
            except Exception:
                pass
            sent = await bot.send_message(chat_id, text=caption or "(–Ω–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞)", reply_markup=reply_markup)
        elif prepared[0] == "url" or prepared[0] == "file_id":
            logging.info("–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ –ø–æ URL/file_id. (–ø–µ—á–∞—Ç–∞–µ—Ç...)")
            try:
                await bot.send_chat_action(chat_id=chat_id, action="upload_photo")
            except Exception:
                pass
            sent = await bot.send_photo(chat_id, photo=prepared[1], caption=caption, reply_markup=reply_markup)
        elif prepared[0] == "file":
            logging.info("–û—Ç–ø—Ä–∞–≤–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –∫–∞–∫ —Ñ–æ—Ç–æ. (–ø–µ—á–∞—Ç–∞–µ—Ç...)")
            try:
                await bot.send_chat_action(chat_id=chat_id, action="upload_photo")
            except Exception:
                pass
            sent = await bot.send_photo(chat_id, photo=prepared[1], caption=caption, reply_markup=reply_markup)
            # –∫—ç—à–∏—Ä—É–µ–º file_id
            if flat_index and getattr(sent, "photo", None):
                file_id = sent.photo[-1].file_id
                Flats[flat_index]["cached_file_id"] = file_id
                logging.info("Cached file_id for flat %s", flat_index)
        else:
            logging.info("–û—Ç–ø—Ä–∞–≤–∫–∞ fallback —Ç–µ–∫—Å—Ç–∞. (–ø–µ—á–∞—Ç–∞–µ—Ç...)")
            try:
                await bot.send_chat_action(chat_id=chat_id, action="typing")
            except Exception:
                pass
            sent = await bot.send_message(chat_id, text=caption or "(–Ω–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞)", reply_markup=reply_markup)

        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º chat_id –∏ message_id
        user_sel = user_selection.setdefault(user_id, {})
        user_sel["display_chat_id"] = sent.chat.id
        user_sel["display_msg_id"] = sent.message_id

        return sent
    except Exception:
        logging.exception("safe_send_and_store: –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ")
        return None

async def try_edit_display_message(user_id: int, photo_value, caption=None, reply_markup=None, flat_index: int = None):
    sel = user_selection.get(user_id, {})
    chat_id = sel.get("display_chat_id")
    msg_id = sel.get("display_msg_id")
    if not chat_id or not msg_id:
        return False

    prepared = prepare_photo_for_send(photo_value)
    try:
        if prepared is None:
            # —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
            try:
                logging.info("–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º caption/text (–ø–µ—á–∞—Ç–∞–µ—Ç...)")
                # –ø–æ–∫–∞–∑–∞—Ç—å "–ø–µ—á–∞—Ç–∞–µ—Ç..."
                try:
                    await bot.send_chat_action(chat_id=chat_id, action="typing")
                except Exception:
                    pass
                await bot.edit_message_caption(chat_id=chat_id, message_id=msg_id, caption=caption, reply_markup=reply_markup)
                return True
            except Exception:
                try:
                    await bot.edit_message_text(chat_id=chat_id, message_id=msg_id, text=caption, reply_markup=reply_markup)
                    return True
                except Exception:
                    return False

        kind = prepared[0]
        if kind in ("url", "file_id"):
            logging.info("–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º media –Ω–∞ URL/file_id (–ø–µ—á–∞—Ç–∞–µ—Ç...)")
            media = InputMediaPhoto(media=prepared[1], caption=caption)
            await bot.edit_message_media(chat_id=chat_id, message_id=msg_id, media=media, reply_markup=reply_markup)
            return True

        if kind == "file":
            cached = Flats.get(flat_index, {}).get("cached_file_id") if flat_index else None
            if cached:
                logging.info("–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º media –∏—Å–ø–æ–ª—å–∑—É—è –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π file_id (–ø–µ—á–∞—Ç–∞–µ—Ç...)")
                media = InputMediaPhoto(media=cached, caption=caption)
                await bot.edit_message_media(chat_id=chat_id, message_id=msg_id, media=media, reply_markup=reply_markup)
                return True
            else:
                try:
                    logging.info("–ü–æ–ø—ã—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è caption –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ (–ø–µ—á–∞—Ç–∞–µ—Ç...)")
                    await bot.edit_message_caption(chat_id=chat_id, message_id=msg_id, caption=caption, reply_markup=reply_markup)
                    return True
                except Exception:
                    return False

        return False
    except Exception:
        logging.exception("try_edit_display_message failed")
        return False


# ====== –•—ç–Ω–¥–ª–µ—Ä—ã ======
@dp.message(Command(commands=["start"]))
async def cmd_start(message: Message):
    user_id = message.from_user.id
    index = 1
    has_contact = bool(user_selection.get(user_id, {}).get("phone"))

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º chat_id —Å—Ä–∞–∑—É
    user_sel = user_selection.setdefault(user_id, {})
    user_sel["display_chat_id"] = message.chat.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–æ—Ç–æ –µ—Å—Ç—å, –∏–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
    flat = Flats.get(index)
    if not flat:
        flat = {"photo": "https://via.placeholder.com/600x400.png?text=No+Image", "raw": None, "rooms": "‚Äî", "area": "‚Äî", "price": 0, "stage": "‚Äî"}

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º display message
    sent = await safe_send_and_store(
        message,
        user_id,
        flat["photo"],
        caption=flat_caption(index),
        reply_markup=main_keyboard(index, has_contact),
        flat_index=index
    )

    if sent is None:
        # fallback: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç
        await message.answer(flat_caption(index), reply_markup=main_keyboard(index, has_contact))


@dp.callback_query(lambda c: c.data and c.data.startswith("flat_"))
async def cb_switch_flat(cb: CallbackQuery):
    user_id = cb.from_user.id
    try:
        idx = int(cb.data.split("_")[1])
    except Exception:
        idx = 1
    if idx < 1:
        idx = len(Flats)
    if idx > len(Flats):
        idx = 1
    has_contact = bool(user_selection.get(user_id, {}).get("phone"))

    # –ü—ã—Ç–∞–µ–º—Å—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–Ω–µ–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    edited = await try_edit_display_message(user_id, Flats[idx]["photo"], caption=flat_caption(idx), reply_markup=main_keyboard(idx, has_contact), flat_index=idx)
    if not edited:
        # fallback: –æ—Ç–ø—Ä–∞–≤–∏–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–∏–º –µ–≥–æ id (–ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –±—É–¥–µ–º –∫—ç—à–∏—Ä–æ–≤–∞—Ç—å file_id)
        await safe_send_and_store(cb.message, user_id, Flats[idx]["photo"], caption=flat_caption(idx), reply_markup=main_keyboard(idx, has_contact), flat_index=idx)

    await cb.answer()

@dp.callback_query(lambda c: c.data == "show_list")
async def cb_show_list(cb: CallbackQuery):
    user_id = cb.from_user.id
    if not user_selection.get(user_id, {}).get("phone"):
        await request_contact_prompt(cb.message, user_id)
        await cb.answer()
        return
    rooms_counter = Counter([v["rooms"] for v in Flats.values()])
    text = "üìã –°–ø–∏—Å–æ–∫ –∫–≤–∞—Ä—Ç–∏—Ä:\n" + "\n".join([f"{rooms}-–∫–æ–º–Ω–∞—Ç–Ω—ã—Ö: {count} —à—Ç" for rooms, count in sorted(rooms_counter.items())])
    edited = await try_edit_display_message(user_id, photo_value=None, caption=text, reply_markup=back_keyboard())
    if not edited:
        await safe_send_and_store(cb.message, user_id, None, caption=text, reply_markup=back_keyboard())
    await cb.answer()

@dp.callback_query(lambda c: c.data and c.data.startswith("choose_"))
async def cb_choose(cb: CallbackQuery, state: FSMContext):
    user_id = cb.from_user.id
    idx = int(cb.data.split("_")[1])
    sel = user_selection.setdefault(user_id, {})
    sel["flat"] = idx
    has_phone = bool(sel.get("phone"))

    edited = await try_edit_display_message(user_id, Flats[idx]["photo"], caption=flat_caption(idx), reply_markup=choose_keyboard(idx, has_contact=has_phone), flat_index=idx)
    if not edited:
        await safe_send_and_store(cb.message, user_id, Flats[idx]["photo"], caption=flat_caption(idx), reply_markup=choose_keyboard(idx, has_contact=has_phone), flat_index=idx)

    if not has_phone:
        await request_contact_prompt(cb.message, user_id)
        await state.set_state(CreditState.sending_phone)

    if has_phone and GROUP_ID:
        await send_or_update_manager_message(user_id)

    await cb.answer()

@dp.callback_query(lambda c: c.data == "back_to_list")
async def cb_back_to_list(cb: CallbackQuery):
    user_id = cb.from_user.id
    idx = user_selection.get(user_id, {}).get("flat", 1)
    has_contact = bool(user_selection.get(user_id, {}).get("phone"))

    edited = await try_edit_display_message(user_id, Flats[idx]["photo"], caption=flat_caption(idx), reply_markup=main_keyboard(idx, has_contact), flat_index=idx)
    if not edited:
        await safe_send_and_store(cb.message, user_id, Flats[idx]["photo"], caption=flat_caption(idx), reply_markup=main_keyboard(idx, has_contact), flat_index=idx)
    await cb.answer()

# ====== –ù–æ–≤—ã–π —Ö—ç–Ω–¥–ª–µ—Ä —Ä–∞—Å—á—ë—Ç–∞ –∫—Ä–µ–¥–∏—Ç–∞ ======
@dp.callback_query(lambda c: c.data and c.data.startswith("calc_"))
async def cb_calc(cb: CallbackQuery, state: FSMContext):
    user_id = cb.from_user.id
    idx = int(cb.data.split("_")[1])
    sel = user_selection.setdefault(user_id, {})
    sel["flat"] = idx

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω
    if not sel.get("phone"):
        await request_contact_prompt(cb.message, user_id)
        await state.set_state(CreditState.sending_phone)
        await cb.answer()
        return

    flat = Flats.get(idx)
    if not flat:
        await cb.message.answer("‚ùå –ö–≤–∞—Ä—Ç–∏—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        await cb.answer()
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –≤–∑–Ω–æ—Å 20% (–º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å)
    sel["downpayment"] = 20

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Å—Ä–æ–∫ –∫—Ä–µ–¥–∏—Ç–∞
    await cb.message.answer(
        f"üí≥ –†–∞—Å—Å—á—ë—Ç –∫—Ä–µ–¥–∏—Ç–∞ –¥–ª—è –∫–≤–∞—Ä—Ç–∏—Ä—ã ‚Ññ{getattr(flat['raw'], 'number', '?')} ({flat['rooms']} –∫–æ–º–Ω., {flat['area']} –º¬≤, {flat['price']}$)\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ –∫—Ä–µ–¥–∏—Ç–∞ –≤ –º–µ—Å—è—Ü–∞—Ö –∏–ª–∏ –≥–æ–¥–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 6–º–µ—Å –∏–ª–∏ 2 –≥–æ–¥–∞):"
    )
    await state.set_state(CreditState.waiting_term)
    await cb.answer()


# ====== –•—ç–Ω–¥–ª–µ—Ä—ã –¥–ª—è —Å—Ä–æ–∫–∞ –∏ downpayment (–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –∫–∞–∫ –±—ã–ª–∏) ======
@dp.message(StateFilter(CreditState.waiting_term))
async def set_term(message: Message, state: FSMContext):
    text = message.text.strip().lower()
    months = None

    if text.isdigit():
        n = int(text)
        if n < 6:
            months = n * 12  # –º–µ–Ω—å—à–µ 6 ‚Äî —ç—Ç–æ –≥–æ–¥—ã
        else:
            months = n       # 6 –∏ –±–æ–ª—å—à–µ ‚Äî —ç—Ç–æ –º–µ—Å—è—Ü—ã
    else:
        match = re.match(r"(\d+)\s*(–≥–æ–¥|–≥–æ–¥–∞|–ª–µ—Ç)", text)
        if match:
            months = int(match.group(1)) * 12
        else:
            match = re.match(r"(\d+)\s*–º–µ—Å", text)
            if match:
                months = int(match.group(1))

    if not months or months < 6 or months > 60*12:
        await message.answer("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å—Ä–æ–∫ (–æ—Ç 6 –º–µ—Å –¥–æ 5 –ª–µ—Ç).")
        return

    sel = user_selection.get(message.from_user.id, {})
    flat_idx = sel.get("flat", 1)
    percent = sel.get("downpayment", 20)
    flat = Flats.get(flat_idx, Flats[1])

    initial, loan, payment, total, overpay = calc_credit(flat["price"], percent, months)
    sel.update({
        "months": months,
        "payment": payment
    })

    result_text = (
        f"üè† –ö–≤–∞—Ä—Ç–∏—Ä–∞: ‚Ññ{getattr(flat['raw'], 'number', '?')} ({flat['rooms']} –∫–æ–º–Ω.)\n"
        f"üí∞ –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –≤–∑–Ω–æ—Å: {percent}% ({initial}$)\n"
        f"üìÖ –°—Ä–æ–∫: {months} –º–µ—Å\n"
        f"üè¶ –°—É–º–º–∞ –∫—Ä–µ–¥–∏—Ç–∞: {loan}$\n"
        f"üíµ –ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –ø–ª–∞—Ç—ë–∂: {payment}$\n"
        f"üìä –û–±—â–∞—è –≤—ã–ø–ª–∞—Ç–∞: {total}$\n"
    )

    await message.answer(result_text, reply_markup=result_keyboard(flat_idx))
    await state.clear()


@dp.message(StateFilter(CreditState.waiting_downpayment))
async def set_downpayment(message: Message, state: FSMContext):
    try:
        percent = int(message.text.strip())
        if percent < 0 or percent > 100:
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç (–æ—Ç 0 –¥–æ 100).")
            return
    except Exception:
        await message.answer("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 20")
        return

    sel = user_selection.setdefault(message.from_user.id, {})
    sel["downpayment"] = percent

    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ –∫—Ä–µ–¥–∏—Ç–∞ (–æ—Ç 6 –º–µ—Å –¥–æ 5 –ª–µ—Ç). –ù–∞–ø—Ä–∏–º–µ—Ä: 2 –≥–æ–¥–∞ –∏–ª–∏ 24 –º–µ—Å.")
    await state.set_state(CreditState.waiting_term)


@dp.message(StateFilter(CreditState.waiting_term))
async def set_term_2(message: Message, state: FSMContext):
    text = message.text.strip().lower()
    months = None
    if text.isdigit():
        months = int(text)
    else:
        match = re.match(r"(\d+)\s*(–≥–æ–¥|–≥–æ–¥–∞|–ª–µ—Ç)", text)
        if match:
            months = int(match.group(1)) * 12
    if not months or months < 6 or months > 360:
        await message.answer("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å—Ä–æ–∫ (–æ—Ç 6 –¥–æ 60 –º–µ—Å—è—Ü–µ–≤).")
        return
    sel = user_selection.get(message.from_user.id, {})
    flat_idx = sel.get("flat", 1)
    percent = sel.get("downpayment", 20)
    flat = Flats.get(flat_idx, Flats[1])
    initial, loan, payment, total, overpay = calc_credit(flat["price"], percent, months)
    sel.update({
        "months": months,
        "payment": payment
    })
    result_text = (
        f"üè† –ö–≤–∞—Ä—Ç–∏—Ä–∞: ‚Ññ{getattr(flat['raw'], 'number', '?')} ({flat['rooms']} –∫–æ–º–Ω.)\n"
        f"üí∞ –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –≤–∑–Ω–æ—Å: {percent}% ({initial}$)\n"
        f"üìÖ –°—Ä–æ–∫: {months} –º–µ—Å\n"
        f"üè¶ –°—É–º–º–∞ –∫—Ä–µ–¥–∏—Ç–∞: {loan}$\n"
        f"üíµ –ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –ø–ª–∞—Ç—ë–∂: {payment}$\n"
        f"üìä –û–±—â–∞—è –≤—ã–ø–ª–∞—Ç–∞: {total}$\n"
    )
    await message.answer(result_text, reply_markup=result_keyboard(flat_idx))
    await state.clear()

@dp.callback_query(lambda c: c.data == "new_calc")
async def cb_new_calc(cb: CallbackQuery):
    user_id = cb.from_user.id
    idx = user_selection.get(user_id, {}).get("flat", 1)
    has_contact = bool(user_selection.get(user_id, {}).get("phone"))
    edited = await try_edit_display_message(user_id, Flats[idx]["photo"], caption=flat_caption(idx), reply_markup=main_keyboard(idx, has_contact), flat_index=idx)
    if not edited:
        await safe_send_and_store(cb.message, user_id, Flats[idx]["photo"], caption=flat_caption(idx), reply_markup=main_keyboard(idx, has_contact), flat_index=idx)
    await cb.answer()

@dp.callback_query(lambda c: c.data == "back_to_flats")
async def cb_back_to_flats(cb: CallbackQuery):
    user_id = cb.from_user.id
    idx = user_selection.get(user_id, {}).get("flat", 1)
    has_contact = bool(user_selection.get(user_id, {}).get("phone"))
    edited = await try_edit_display_message(user_id, Flats[idx]["photo"], caption=flat_caption(idx), reply_markup=main_keyboard(idx, has_contact), flat_index=idx)
    if not edited:
        await safe_send_and_store(cb.message, user_id, Flats[idx]["photo"], caption=flat_caption(idx), reply_markup=main_keyboard(idx, has_contact), flat_index=idx)
    await cb.answer()

@dp.message(StateFilter(CreditState.sending_phone))
async def handle_phone(message: Message, state: FSMContext):
    phone = message.contact.phone_number if message.contact else message.text.strip()

    # ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞: –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
    phone = "".join(filter(str.isdigit, phone))

    # ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞: —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏ –¥–ª–∏–Ω–∞ 9‚Äì15
    if not (phone.isdigit() and 9 <= len(phone) <= 15):
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ‚Äî —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã, –¥–ª–∏–Ω–æ–π –æ—Ç 9 –¥–æ 15.")
        return

    # ‚¨áÔ∏è –æ—Å—Ç–∞–ª—å–Ω–æ–π —Ç–≤–æ–π –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    sel = user_selection.setdefault(message.from_user.id, {})
    sel["phone"] = phone
    sel["username"] = message.from_user.username or ""
    sel["name"] = message.from_user.full_name or f"{message.from_user.first_name or ''} {message.from_user.last_name or ''}".strip()
    sel["phone_prompted"] = False

    persist_contact_to_csv(message.from_user.id)

    try:
        asyncio.create_task(delayed_send_contact_to_managers(message.from_user.id, delay_seconds=15 * 60))
    except Exception:
        logging.exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –¥–ª—è –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞.")

    if sel.get("flat") and GROUP_ID:
        await send_or_update_manager_message(message.from_user.id)

    await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ! –ù–æ–º–µ—Ä —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –¢–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ –¥–µ–π—Å—Ç–≤–∏—è.", reply_markup=types.ReplyKeyboardRemove())
    await message.answer(
    "üá∑üá∫ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Royal Residence.\n"
    "–Ø ‚Äî –≤–∞—à AI-–º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º, —Å–æ–∑–¥–∞–Ω–Ω—ã–π, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –≤–∞–º –Ω–∞–π—Ç–∏ –∏–¥–µ–∞–ª—å–Ω—É—é –∫–≤–∞—Ä—Ç–∏—Ä—É.\n"
    "–ü–æ–¥–±–µ—Ä—É –ª—É—á—à–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã, –ø–æ–∫–∞–∂—É –ø–ª–∞–Ω–∏—Ä–æ–≤–∫–∏ –∏ –ø–æ–º–æ–≥—É —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –∏–ø–æ—Ç–µ–∫—É.\n\n"
    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ –≤–∞—à–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç, —ç—Ç–∞–∂, –ø–ª–æ—â–∞–¥—å –∏–ª–∏ –±—é–¥–∂–µ—Ç.\n\n"
    "–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –ø–æ–¥–æ–±—Ä–∞—Ç—å —Å–∞–º—ã–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã üèô \n\n"
    "–° —á–µ–≥–æ –Ω–∞—á–Ω—ë–º –ø–æ–∏—Å–∫?\n\n"

    "üá∫üáø Royal Residence-ga xush kelibsiz.\n"
    "Men sizning AI savdo menejeringizman, u sizga mukammal kvartirani topishga yordam berish uchun yaratilgan.\n"
    "Men eng yaxshi variantlarni tanlayman, sizga qavat rejalarini ko'rsataman va ipotekani hisoblashingizga yordam beraman.\n\n"

    "Iltimos, afzalliklaringizni belgilang - xonalar soni, qavat, maydon va byudjet.\n\n"

    "Bu sizga eng mos variantlarni topishga yordam beradi üèô\n\n"

    "Qidiruvni qayerdan boshlaymiz?\n\n"
)

    await state.clear()

@dp.message()
async def handle_question(message: Message, state: FSMContext):
    user_id = message.from_user.id
    sel = user_selection.setdefault(user_id, {})

    # üö´ –ü—Ä–æ–≤–µ—Ä—è–µ–º ‚Äî –µ—Å–ª–∏ –Ω–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    if not sel.get("phone"):
        await message.answer(
            "üì≤ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.",
            reply_markup=types.ReplyKeyboardMarkup(
                keyboard=[[types.KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç", request_contact=True)]],
                resize_keyboard=True,
                one_time_keyboard=True
            )
        )
        await state.set_state(CreditState.sending_phone)
        return

    question = message.text.strip()
    if not question:
        await message.answer("‚ö†Ô∏è –ü—É—Å—Ç–æ–π –≤–æ–ø—Ä–æ—Å. –ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç.")
        return

    try:
        # üîπ GPT-–æ—Ç–≤–µ—Ç —Å —Ñ–æ—Ç–æ
        logging.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª —É GPT: %s", question)

        # --- —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º "–ø–µ—á–∞—Ç–∞–µ—Ç..." ---
        try:
            await bot.send_chat_action(chat_id=message.chat.id, action="typing")
        except Exception:
            pass

        # --- –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏–∏ (—á—Ç–æ–±—ã –¥–∏–∞–ª–æ–≥ –±—ã–ª –ø–æ–ª–Ω—ã–º) ---
        try:
            # –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ openai_func.user_conversations —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —ç—Ç–æ dict-like
            if not hasattr(openai_func, "user_conversations"):
                openai_func.user_conversations = defaultdict(list)
            openai_func.user_conversations[message.from_user.id].append({
                "role": "user",
                "content": question
            })
        except Exception:
            logging.exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ user_conversations.")

        # ---- –í–ê–ñ–ù–û: ask_openai_sync –≤ openai_func ‚Äî –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –ø–æ—ç—Ç–æ–º—É –∂–¥—ë–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å await ----
        response = await openai_func.ask_openai_sync(user_id, message.text, bot=bot, chat_id=message.chat.id)

        # --- –ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç—ã –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏–∏ ---
        try:
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –æ—Ç–≤–µ—Ç–æ–≤ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞–∫ assistant messages
            if isinstance(response, dict):
                # –ï—Å–ª–∏ –µ—Å—Ç—å flats -> –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
                if "flats" in response:
                    for flat in response["flats"]:
                        content = flat.get("text") or ""
                        if content:
                            openai_func.user_conversations[message.from_user.id].append({
                                "role": "assistant",
                                "content": content
                            })
                elif "text" in response:
                    content = response.get("text") or ""
                    if content:
                        openai_func.user_conversations[message.from_user.id].append({
                            "role": "assistant",
                            "content": content
                        })
                else:
                    # fallback: stringify dict
                    openai_func.user_conversations[message.from_user.id].append({
                        "role": "assistant",
                        "content": str(response)
                    })
            else:
                # response could be plain string
                openai_func.user_conversations[message.from_user.id].append({
                    "role": "assistant",
                    "content": str(response)
                })
        except Exception:
            logging.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤ user_conversations.")

        # --- –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã) ---
        if isinstance(response, dict):
            if "flats" in response:
                for flat in response["flats"]:
                    logging.info("–û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã –æ—Ç GPT (–ø–µ—á–∞—Ç–∞–µ—Ç...)")
                    try:
                        await bot.send_chat_action(chat_id=message.chat.id, action="typing")
                    except Exception:
                        pass
                    logging.info("–ø–µ—á–∞—Ç–∞–µ—Ç...")
                    # –Ω–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞, —á—Ç–æ–±—ã —Å—Ç–∞—Ç—É—Å –≤–∏–¥–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                    await asyncio.sleep(1)
                    if flat.get("photo"):
                        await bot.send_photo(chat_id=message.chat.id, photo=flat["photo"], caption=flat["text"])
                    else:
                        await bot.send_message(chat_id=message.chat.id, text=flat["text"])
            elif response.get("photo"):
                logging.info("–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ-–æ—Ç–≤–µ—Ç–∞ –æ—Ç GPT (–ø–µ—á–∞—Ç–∞–µ—Ç...)")
                try:
                    await bot.send_chat_action(chat_id=message.chat.id, action="typing")
                except Exception:
                    pass
                logging.info("–ø–µ—á–∞—Ç–∞–µ—Ç...")
                await asyncio.sleep(1)
                await bot.send_photo(chat_id=message.chat.id, photo=response["photo"], caption=response.get("text", ""))
            else:
                logging.info("–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç-–æ—Ç–≤–µ—Ç–∞ –æ—Ç GPT (–ø–µ—á–∞—Ç–∞–µ—Ç...)")
                try:
                    await bot.send_chat_action(chat_id=message.chat.id, action="typing")
                except Exception:
                    pass
                logging.info("–ø–µ—á–∞—Ç–∞–µ—Ç...")
                await asyncio.sleep(1)
                await bot.send_message(chat_id=message.chat.id, text=response.get("text", str(response)))
        else:
            logging.info("–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ—Å—Ç–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –æ—Ç GPT (–ø–µ—á–∞—Ç–∞–µ—Ç...)")
            try:
                await bot.send_chat_action(chat_id=message.chat.id, action="typing")
            except Exception:
                pass
            logging.info("–ø–µ—á–∞—Ç–∞–µ—Ç...")
            await asyncio.sleep(1)
            await bot.send_message(chat_id=message.chat.id, text=str(response))

        # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
        if GROUP_ID:
            await send_or_update_manager_message(message.from_user.id)


    except Exception as e:
        err = str(e)
        if "401" in err or "api key" in err.lower():
            answer = "‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ OpenAI (401). –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API_KEY."
        else:
            answer = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ GPT: {e}"
        await message.answer(answer, reply_markup=back_keyboard())


# ====== –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ======
async def main():
    await load_flats()
    logging.info("–ë–æ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –≥–æ—Ç–æ–≤. –ó–∞–ø—É—Å–∫ polling...")
    while True:
        try:
            await dp.start_polling(bot)
        except exceptions.TelegramNetworkError:
            logging.warning("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ Telegram, –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è —á–µ—Ä–µ–∑ 3 —Å–µ–∫...")
            await asyncio.sleep(5)
        except KeyboardInterrupt:
            logging.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é")
            break
        except Exception:
            logging.exception("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ polling, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 3 —Å–µ–∫...")
            await asyncio.sleep(5)

async def show_typing(bot, chat_id: int):
    """–ü–æ—Å—Ç–æ—è–Ω–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç '–ø–µ—á–∞—Ç–∞–µ—Ç...', –ø–æ–∫–∞ –∑–∞–¥–∞—á–∞ –Ω–µ –æ—Ç–º–µ–Ω–µ–Ω–∞"""
    try:
        while True:
            await bot.send_chat_action(chat_id, "typing")
            await asyncio.sleep(5)  # –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫
    except asyncio.CancelledError:
        pass


if __name__ == "__main__":
    asyncio.run(main())
